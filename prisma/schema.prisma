// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  login         String @unique
  password      String
  version       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  refreshToken  String? @unique
}

model Artist {
  id     String  @id @default(uuid())
  name   String
  grammy Boolean

  Album     Album[]
  Track     Track[]
  Favorites Favorites[] @relation("artist")
}

model Track {
  id       String @id @default(uuid())
  name     String
  duration Int
  artistId  String?
  albumId   String?

  artist    Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  album     Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  favorite Favorites[] @relation("track")
}

model Album {
  id   String @id @default(uuid())
  name String
  year Int
  artistId  String?

  artist    Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  Track     Track[]
  Favorites Favorites[] @relation("album")
}

model Favorites {
  id       String @id
  track    Track?  @relation("track", fields: [trackId], references: [id])
  trackId  String?
  artist   Artist? @relation("artist", fields: [artistId], references: [id])
  artistId String?
  album    Album?  @relation("album", fields: [albumId], references: [id])
  albumId  String?
}
